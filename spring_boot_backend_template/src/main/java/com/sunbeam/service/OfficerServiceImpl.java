package com.sunbeam.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.sunbeam.custom_exceptions.ApiException;
import com.sunbeam.custom_exceptions.ResourceNotFoundException;
import com.sunbeam.dao.DesignationDao;
import com.sunbeam.dao.OfficerDao;
import com.sunbeam.dao.OfficerLoginDao;
import com.sunbeam.dao.PoliceStationDao;
import com.sunbeam.dto.OfficerDTO;
import com.sunbeam.dto.OfficerLoginReqDTO;
import com.sunbeam.dto.OfficerLoginRespDTO;
import com.sunbeam.dto.OfficerRespDTO;
import com.sunbeam.dto.OfficerUpdateDTO;
import com.sunbeam.entities.Designation;
import com.sunbeam.entities.Officer;
import com.sunbeam.entities.OfficerLogin;
import com.sunbeam.entities.OfficerStatus;
import com.sunbeam.entities.PoliceStation;
import com.sunbeam.exception.CustomExceptionClass;

import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;


@Service
@Transactional
@AllArgsConstructor
public class OfficerServiceImpl implements OfficerService {

	
    private final OfficerLoginDao officerLoginDao; // ✅ updated name
    
    private final OfficerDao officerDao;
    
    private final PoliceStationDao policeStationDao;
    
    private final DesignationDao designationDao;
    
    private final ModelMapper modelMapper;
    

//    @Override
//    public OfficerLoginRespDTO authenticate(OfficerLoginReqDTO logindto) {
//        OfficerLogin login = officerLoginDao
//            .findByOfficerOfficerId(logindto.getOfficerId())
//            .orElseThrow(() -> new ResourceNotFoundException("Officer not found!"));
//
//        if (!login.getPassword().equals(logindto.getPassword())) {
//            throw new ApiException("Invalid password!");
//        }
//
//        return new OfficerLoginRespDTO("Login Successful!");
//    }
//    
    
    @Override
    public OfficerLoginRespDTO authenticate(OfficerLoginReqDTO logindto) {
        OfficerLogin login = officerLoginDao
            .findByOfficerOfficerId(logindto.getOfficerId())
            .orElseThrow(() -> new ResourceNotFoundException("Officer not found!"));

        if (!login.getPassword().equals(logindto.getPassword())) {
            throw new ApiException("Invalid password!");
        }

        Long designationId = login.getOfficer().getDesignation().getDesignationId(); // ✅ extract designation ID
        String officerName = login.getOfficer().getOfficerName();
        return new OfficerLoginRespDTO("Login Successful!", designationId,officerName);
    }
    
//    @Override
//    public String addOfficer(OfficerDTO officerDTO) {
//        Officer officer = new Officer();
//        officer.setOfficerName(officerDTO.getOfficerName());
//        officer.setActiveStatus(OfficerStatus.ACTIVE);
//
//        // Set Designation (required)
//        Designation desig = designationDao.findById(officerDTO.getDesignationId())
//            .orElseThrow(() -> new CustomExceptionClass("Designation not found"));
//        officer.setDesignation(desig);
//
//        // Set Police Station only if ID is provided
//        if (officerDTO.getPoliceStationId() != null) {
//            PoliceStation ps = policeStationDao.findById(officerDTO.getPoliceStationId())
//                .orElseThrow(() -> new CustomExceptionClass("Police Station not found"));
//            officer.setPoliceStation(ps);
//        } else {
//            officer.setPoliceStation(null); // optional but clear
//        }
//
//        officerDao.save(officer);
//        return "Officer Added";
//    }
    
    @Override
    public String addOfficer(OfficerDTO officerDTO) {
        Officer officer = new Officer();
        officer.setOfficerName(officerDTO.getOfficerName());
        officer.setActiveStatus(OfficerStatus.ACTIVE);

        // Set Designation (required)
        Designation desig = designationDao.findById(officerDTO.getDesignationId())
            .orElseThrow(() -> new CustomExceptionClass("Designation not found"));
        officer.setDesignation(desig);

        // Set Police Station only if ID is provided
        if (officerDTO.getPoliceStationId() != null) {
            PoliceStation ps = policeStationDao.findById(officerDTO.getPoliceStationId())
                .orElseThrow(() -> new CustomExceptionClass("Police Station not found"));
            officer.setPoliceStation(ps);
        } else {
            officer.setPoliceStation(null); // optional but clear
        }

        // Save officer - this will assign ID if autogenerated
        officer = officerDao.save(officer);

        // Return the newly created officer's ID as string
        return String.valueOf(officer.getOfficerId());
    }



    @Override
	public String updateDesignation(Long officerId) {
	  
	    Officer officer = officerDao.findById(officerId)
	        .orElseThrow(() -> new CustomExceptionClass("Officer not found with id: " + officerId));

	    Designation designation = designationDao.findByDesignationName("station_incharge")
	        .orElseThrow(() -> new CustomExceptionClass("Designation 'station_incharge' not found"));

	    officer.setDesignation(designation);

	    officerDao.save(officer);

	    return "Designation Updated Successfully";
	}
    
    @Override
    public List<OfficerRespDTO> getAllOfficers() {
        List<Officer> allOfficers = officerDao.findAll();

        return allOfficers.stream()
                .map(officer -> {
                    OfficerRespDTO dto = new OfficerRespDTO();
                    dto.setOfficerId(officer.getOfficerId());
                    dto.setOfficerName(officer.getOfficerName());
                    dto.setDesignation(officer.getDesignation().getDesignationName());

                    // Null-safe police station name
                    if (officer.getPoliceStation() != null) {
                        dto.setPoliceStationName(officer.getPoliceStation().getPoliceStationName());
                    } else {
                        dto.setPoliceStationName("Not Assigned");
                    }

                    dto.setStatus(officer.getActiveStatus().toString());
                    return dto;
                })
                .collect(Collectors.toList());
    }

    
    
    
//    @Override
//    public List<OfficerRespDTO> getAllInspectors() {
//        List<Officer> allOfficers = officerDao.findByDesignationDesignationNameIgnoreCase("station_head");
//
//        return allOfficers.stream()
//                .map(officer -> {
//                    OfficerRespDTO dto = new OfficerRespDTO();
//                    dto.setOfficerId(officer.getOfficerId());
//                    dto.setOfficerName(officer.getOfficerName());
//                    dto.setDesignation(officer.getDesignation().getDesignationName());
//                    dto.setPoliceStationName(officer.getPoliceStation().getPoliceStationName());
//                    dto.setStatus(officer.getActiveStatus().toString());
//                    return dto;
//                }).toList();
//    }
    
//    @Override
//    public List<OfficerRespDTO> getAllInspectors() {
//        List<Officer> allOfficers = officerDao.findByDesignationDesignationNameIgnoreCase("station_incharge");
//
//        return allOfficers.stream()
//                .map(officer -> {
//                    OfficerRespDTO dto = new OfficerRespDTO();
//                    dto.setOfficerId(officer.getOfficerId());
//                    dto.setOfficerName(officer.getOfficerName());
//                    dto.setDesignation(officer.getDesignation().getDesignationName());
//
//                    // Null check for policeStation
//                    if (officer.getPoliceStation() != null) {
//                        dto.setPoliceStationName(officer.getPoliceStation().getPoliceStationName());
//                    } else {
//                        dto.setPoliceStationName("Not Assigned"); // or use null or empty string
//                    }
//
//                    dto.setStatus(officer.getActiveStatus().toString());
//                    return dto;
//                }).toList();
//    }
    @Override
    public List<OfficerRespDTO> getAllInspectors() {
        List<Officer> allOfficers = officerDao.findByDesignationDesignationNameIgnoreCase("station_incharge");

        return allOfficers.stream()
                .filter(officer -> officer.getPoliceStation() == null) // ⬅ only null police station
                .map(officer -> {
                    OfficerRespDTO dto = new OfficerRespDTO();
                    dto.setOfficerId(officer.getOfficerId());
                    dto.setOfficerName(officer.getOfficerName());
                    dto.setDesignation(officer.getDesignation().getDesignationName());
                    dto.setPoliceStationName("Not Assigned");
                    dto.setStatus(officer.getActiveStatus().toString());
                    return dto;
                }).toList();
    }

	@Override
	public void deleteOfficer(Long id) {
		 Officer officer = officerDao.findById(id)
		            .orElseThrow(() -> new RuntimeException("Officer not found with ID: " + id));

		        if (officer.getActiveStatus() == OfficerStatus.INACTIVE) {
		            throw new RuntimeException("Officer is already INACTIVE.");
		        }

		        officer.setActiveStatus(OfficerStatus.INACTIVE);
		        officerDao.save(officer);	
	}

	@Override
	public String updateOfficer(Long id, OfficerUpdateDTO dto) {
	    Officer officer = officerDao.findById(id)
	            .orElseThrow(() -> new RuntimeException("Officer not found with ID: " + id));

	        if (dto.getOfficerName() != null) officer.setOfficerName(dto.getOfficerName());

	        if (dto.getDesignationId() != null) {
	            Designation designation = designationDao.findById(dto.getDesignationId())
	                .orElseThrow(() -> new RuntimeException("Designation not found"));
	            officer.setDesignation(designation);
	        }

	        if (dto.getPoliceStationId() != null) {
	            PoliceStation station = policeStationDao.findById(dto.getPoliceStationId())
	                .orElseThrow(() -> new RuntimeException("Police Station not found"));
	            officer.setPoliceStation(station);
	        }

	        // ✅ Update Password if present
	        if (dto.getPassword() != null) {
	            OfficerLogin login = officerLoginDao.findByOfficerOfficerId(officer.getOfficerId())
	                .orElseThrow(() -> new RuntimeException("Login credentials not found for Officer ID: " + id));
	            login.setPassword(dto.getPassword());
	            officerLoginDao.save(login);
	        }
	        officerDao.save(officer);
	        return "Updated Officer Successfully!!";
	}
	
	@Override
	public OfficerRespDTO getOfficerById(Long id) {
		Officer officer = officerDao.findById(id).orElseThrow(()-> new ResourceNotFoundException("Officer not found"));
		return new OfficerRespDTO(officer.getOfficerId(),officer.getOfficerName(),officer.getDesignation().getDesignationName(),officer.getPoliceStation().getPoliceStationName(),officer.getActiveStatus().toString());
	}

	@Override
	public List<OfficerRespDTO> getOfficersByInspector(Long inspectorId) {
		 Officer inspector = officerDao.findById(inspectorId)
	                .orElseThrow(() -> new RuntimeException("Inspector not found"));

	        PoliceStation station = inspector.getPoliceStation();
	        List<Officer> officers = officerDao.findByPoliceStation(station);

	        return officers.stream()
	                .map(officer -> new OfficerRespDTO(officer.getOfficerId(),officer.getOfficerName(),officer.getDesignation().getDesignationName(),officer.getPoliceStation().getPoliceStationName(),officer.getActiveStatus().name()))
	                .collect(Collectors.toList());
	}
	
	@Override
	public List<OfficerRespDTO> getUnassignedOfficers() {
	    Long designationId = 2L; // Station Incharge ID
	    List<Officer> unassigned = officerDao.findByPoliceStationIsNullAndDesignationDesignationId(designationId);

	    return unassigned.stream()
	            .map(officer -> {
	                OfficerRespDTO dto = new OfficerRespDTO();
	                dto.setOfficerId(officer.getOfficerId());
	                dto.setOfficerName(officer.getOfficerName());
	                dto.setDesignation(officer.getDesignation().getDesignationName());
	                dto.setPoliceStationName("Not Assigned");
	                dto.setStatus(officer.getActiveStatus().toString());
	                return dto;
	            })
	            .collect(Collectors.toList());
	}
	
	@Override
	public String assignStationToOfficer(Long officerId, Long policeStationId) {
	    Officer officer = officerDao.findById(officerId)
	        .orElseThrow(() -> new CustomExceptionClass("Officer not found with id: " + officerId));
	    
	    PoliceStation station = policeStationDao.findById(policeStationId)
	        .orElseThrow(() -> new CustomExceptionClass("Police Station not found with id: " + policeStationId));
	    
	    officer.setPoliceStation(station);
	    officerDao.save(officer);
	    
	    return "Police Station assigned to Officer successfully!";
	}
	
	public OfficerLogin addOfficerLogin(OfficerLoginReqDTO dto) {
        Optional<Officer> optionalOfficer = officerDao.findById(dto.getOfficerId());
        if (!optionalOfficer.isPresent()) {
            throw new RuntimeException("Officer with ID " + dto.getOfficerId() + " not found.");
        }

        OfficerLogin officerLogin = new OfficerLogin();
        officerLogin.setOfficer(optionalOfficer.get());
        officerLogin.setPassword(dto.getPassword());

        return officerLoginDao.save(officerLogin);
    }
	
}